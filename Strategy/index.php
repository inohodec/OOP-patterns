<?php

/**************
* Шаблон Strategy
* в действительности в объектно-ориентированных системах классы представляют собой сущности,
* которые обычно обладают как состоянием (переменными экземпляров) так и методами
* В данном патерне, сущностью оказывается поведение. Однако даже поведение может обладать состоянием и методами
* к примеру "полёт" может использовать переменные экземпляра представляющие атрибуты полета
* (количество двигателей максимальная высота, скорость)
 *
 *
 *  Шаблон Strategy определяет семейство алгоритмов, инкапсулирует каждый из них и
 * обеспечивает их взаимозаменяемость. Он позволяет изменять алгоритмы независимо
 * от их использования на стороне клиентского кода
***************/



echo "<a href='../index.php'>Back to patterns list</a><hr>";
echo "<p style='text-align: center; margin: 15px;'><img src='Strategy'></p>";


/* --------------- Клиентский код ----------------*/

require_once "spaceShips.php"; # Здесь находится код для кораблей
require_once "features.php"; # Здесь находится код для полетов и пушек (т.е. алгоритмы кот мы инкапсулируем)


$ship1 = new Dreadnought();
$ship2 = new Scout();
$ship3 = new ToyShip();

$ship1->display();
$ship2->display();
$ship3->display();

/******** А теперь меняем пушку у игрушки на "Девастатор" **************/

$ship3->setShooting(new Devastator());
$ship3->display();
